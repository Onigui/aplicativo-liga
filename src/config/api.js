// Configura√ß√£o da API - Liga do Bem 
// Este arquivo centraliza todas as URLs da API 
 
// Detectar se est√° rodando no app m√≥vel ou no navegador 
const isApp = window.location.protocol === 'file:' || 
              window.location.protocol === 'capacitor:' || 
              window.location.protocol === 'ionic:' || 
              window.Capacitor?.isNativePlatform(); 
 
// IP local detectado automaticamente 
const getLocalIP = () => { 
  return '192.168.0.21'; // IP detectado automaticamente 
}; 
 
// URLs da API para diferentes ambientes 
const API_URLS = { 
  // Desenvolvimento local (navegador) 
  development: 'http://localhost:3001', 
  
  // Produ√ß√£o online (Render) - Backend real
  production: 'https://liga-do-bem-api.onrender.com', 
  
  // Rede local (para testes na mesma rede) 
  local_network: `http://${getLocalIP()}:3001`, 
  
  // App m√≥vel (APK/PWA) - Usa servidor online gratuito tempor√°rio
  app: 'https://my-json-server.typicode.com/typicode/demo' 
}; 
 
// Determinar qual URL usar baseado no ambiente
let baseURL;

// For√ßar uso da API de produ√ß√£o para garantir que funcione no deploy
if (process.env.REACT_APP_API_URL) {
  baseURL = process.env.REACT_APP_API_URL;
  console.log('üîß Override: Usando vari√°vel de ambiente');
} else if (isApp) {
  baseURL = API_URLS.app;
  console.log('üîß Detectado: App m√≥vel');
} else if (process.env.NODE_ENV === 'production') {
  baseURL = API_URLS.production;
  console.log('üîß Detectado: Produ√ß√£o');
} else if (process.env.REACT_APP_USE_NETWORK) {
  baseURL = API_URLS.local_network;
  console.log('üîß Detectado: Rede local');
} else {
  // For√ßar produ√ß√£o mesmo em desenvolvimento para testar o deploy
  baseURL = API_URLS.production;
  console.log('üîß For√ßado: Usando API de produ√ß√£o para teste');
} 
 
// Permitir override via vari√°vel de ambiente 
if (process.env.REACT_APP_API_URL) { 
  baseURL = process.env.REACT_APP_API_URL; 
  console.log('üîß Override: Usando vari√°vel de ambiente'); 
} 
 
export const API_BASE_URL = baseURL; 
 
// Logs para debug 
console.log('üåê API configurada para:', baseURL); 
console.log('üì± √â app m√≥vel:', isApp); 
console.log('üè† Ambiente:', process.env.NODE_ENV); 
 
// Fun√ß√£o auxiliar para construir URLs da API 
export const buildApiUrl = (endpoint) => { 
  const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`; 
  return `${API_BASE_URL}${cleanEndpoint}`; 
}; 
 
// Fun√ß√£o para testar conectividade com a API 
export const testApiConnection = async () => { 
  try { 
    const response = await fetch(`${API_BASE_URL}/api/health`); 
    if (response.ok) { 
      console.log('‚úÖ Conex√£o com API estabelecida'); 
      return true; 
    } else { 
      console.log('‚ùå API respondeu com erro:', response.status); 
      return false; 
    } 
  } catch (error) { 
    console.log('‚ùå Erro ao conectar com API:', error); 
    return false; 
  } 
}; 
 
// Exportar configura√ß√µes para uso em outros m√≥dulos 
const apiConfig = { 
  API_BASE_URL, 
  API_URLS, 
  buildApiUrl, 
  testApiConnection, 
  isApp 
};

export default apiConfig; 
